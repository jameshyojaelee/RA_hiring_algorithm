getwd()
setwd("C:\Users\james\Desktop\POLI170 Policy memo")
setwd("C:/Users/james/Desktop/POLI170 Policy memo")
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv")
head(df)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv")
head(df)
pca <- prcomp(df)
View(df)
df <- df[-c(0)]
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv")
View(df)
df <- df[-c(2,50)]
View(df)
df <- df[-c(2,50)]
df <- df[c(2,50)]
View(df)
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv")
df$Ã¯..ID <- NULL
View(df)
View(df)
pca <- prcomp(df)
pca <- prcomp(t(df))
View(df)
#linear regression
lm(df)
#linear regression
RA_linreg <- lm(df)
summary(RA_linreg)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv")
View(df)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
View(df)
df$ID <- NULL
#convert catergorical values into factors
df$race <- factor(df$race)
View(df)
#convert catergorical values into factors
df$racef <- factor(df$race)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
df$ID <- NULL
is.factor(df$race)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
df$ID <- NULL
# linear regression
RA_linreg <- lm(df)
head(df)
View(df)
?prcomp
#first, import UK food data
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
x <- read.csv(url)
dim(x)
View(x)
#the row names need to be changing
rownames(x) <- x[,1]
View(x)
x <- read.csv(url)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
View(df)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
View(x)
t(x)
pca <- prcomp(df)
df$race <- factor(df$race)
View(df)
df$race <- factor(unique(df$race))
View(df)
df$race <- NULL
df$major <- NULL
pca <- prcomp(df)
summary(pca)
summary(pca)
pca <- prcomp(t(x))
#the row names need to be changing
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
#check the dimension again
dim(x)
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
pairs(x, col=rainbow(nrow(x)), pch=16)
pca <- prcomp(t(x))
summary(pca)
RA_pca <- prcomp(df)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
pca <- prcomp(t(x))
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
barplot(v, xlab="Principal Component", ylab="Percent Variation")
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
head(df)
questions <- c(df[,1])
questions <- c(df[1,])
View(questions)
questions <- colnames(df[1,])
questions <- colnames(df)
questions <- colnames(df)[9:58]
i <- 0
?mean
df$score <- mean(df[,-8])
df$score <- rowmmeans(df[,-8])
?rowMeans
df$score <- rowmMeans(df[,-8])
data.frame(scoreMean =rowmMeans(df[,-8]))
df$score <- rowMeans(df[,-8])
data.frame(scoreMean =rowMeans(df[,-8]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,-8]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,-1]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,-9]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,9:58]))
df$scoreMean <- scoreMean =rowMeans(df[,9:58])
df$scoreMean <- rowMeans(df[,9:58])
View(df)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
head(df)
df$scoreMean <- rowMeans(df[,9:58])
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA ~ df$scoreMean)
?t.test
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA ~ df$scoreMean)
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA, df$scoreMean)
#hypothesis 1: higher gpa = higher score in evaluation
ttest <- t.test(df$GPA, df$scoreMean)
summary(ttest)
t.test(df$GPA, df$scoreMean)
summary(ttest)
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA, df$scoreMean)
getwd()
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
head(df)
df$scoreMean <- rowMeans(df[,9:58])
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA, df$scoreMean)
#make subset without categorical values
drops <- c("race", "major")
df_numeric <- df[, !names(df) %in% drops]
df_numeric.head
df_numeric.head()
head(df_numeric)
# PCA without normalization (what NOT to do)
RA_pca <- prcomp(df_numeric)
source('C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm/RA_hiring_algorithm.R', echo=TRUE)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
# PCA without normalization (what NOT to do)
RA_pca <- prcomp(df_numeric)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
install.packages("reticulate")
library(reticulate)
use_python("/usr/bin/python")
n
library(reticulate)
use_python("C:/Users/james/AppData/Local/Programs/Python")
library(reticulate)
use_python("C:/Users/james/.conda/envs/r-reticulate")
library(reticulate)
library(reticulate)
use_python("C:/ProgramData/Anaconda3")
