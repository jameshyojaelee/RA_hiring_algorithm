n
library(reticulate)
use_python("C:/Users/james/AppData/Local/Programs/Python")
library(reticulate)
use_python("C:/Users/james/.conda/envs/r-reticulate")
library(reticulate)
library(reticulate)
use_python("C:/ProgramData/Anaconda3")
library(reticulate)
use_python("C:/ProgramData/Anaconda3")
reticulate::repl_python()
major_count
quit
normalized_data <- py$normalized_data
#hypothesis 1: high
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(RA_pca$x))
---
title: "mini-project"
author: "James Lee"
date: "11/12/2020"
output: pdf_document
---
# 1. Exploratory data analysis
## Preparing the data
```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"
# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
head(wisc.df)
```
```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
```
```{r}
# Create diagnosis vector for later
diagnosis <- wisc.df$diagnosis
```
## Exploratory data analysis
### Q1. How many observations are in this dataset?
```{r}
nrow(wisc.df)
```
569 observation
### Q2. How many of the observations have a malignant diagnosis?
```{r}
nrow(wisc.df[which(wisc.df$diagnosis == "M"),])
```
### Q3. How many variables/features in the data are suffixed with _mean?
```{r}
head(wisc.df)
```
10 variables are suffixed with _mean
# 2. Principal Component Analysis
## Performing PCA
```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
```
```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = TRUE)
summary(wisc.pr)
```
###  Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
44.27%
### Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
the first 3 PCs
### Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
the first 7 PCs
## Interpreting PCA results
```{r}
biplot(wisc.pr)
```
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = TRUE)
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"
# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
head(wisc.df)
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
# Create diagnosis vector for later
diagnosis <- wisc.df$diagnosis
nrow(wisc.df)
nrow(wisc.df[which(wisc.df$diagnosis == "M"),])
head(wisc.df)
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = TRUE)
summary(wisc.pr)
biplot(wisc.pr)
biplot(RA_pca)
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
#biplot (NOT ideal)
biplot(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
summary(RA_pca)
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis
# Load the ggplot2 package
library(ggplot2)
# Make a scatter plot colored by diagnosis
ggplot(df) +
aes(PC1, PC2, col=diagnosis) +
geom_point()
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Variance explained by each principal component: pve
pve <- RA_pca / sum(RA_pca)
# Variance explained by each principal component: pve
pr.var <- RA_pca$sdev^2
pve <- pr.var / sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Plot PC1 vs PC2
plot(RA_pca$x[,2], RA_pca$x[,3], xlab="PC1", ylab="PC2", xlim=c(-270,500))
# Plot PC1 vs PC2
plot(RA_pca$x[,3], RA_pca$x[,4], xlab="PC1", ylab="PC2", xlim=c(-270,500))
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-10,10))
pca_df <- RA_pca$x
# Load the ggplot2 package
library(ggplot2)
pca_df <- RA_pca$x
# Make a scatter plot colored by diagnosis
ggplot(pca_df) +
aes(PC1, PC2) +
geom_point()
head(pca_df)
View(pca_df)
# Make a scatter plot colored by diagnosis
ggplot(pca_df) +
aes(PC1, PC2) +
geom_point()
# Load the ggplot2 package
library(ggplot2)
# Make a scatter plot colored by diagnosis
ggplot(pca_df) + aes(PC1, PC2) +  geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df + aes(PC1, PC2) )   +geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df) + aes(x = PC1, y=PC2) +  geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df + aes(x=PC1, y=PC2))  +  geom_point()
# Load the ggplot2 package
library(ggplot2)
pca_df <- RA_pca$x
head(pca_df)
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2))
# Load the ggplot2 package
library(ggplot2)
pca_df <- RA_pca$x
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2))
pca_df <- RA_pca$x
pca_df <- as.data.frame(RA_pca$x)
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2))
+ geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC2, y=PC3)) + geom_point()
# Load the ggplot2 package
library(ggplot2)
pca_df <- as.data.frame(RA_pca$x)
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=3, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=4, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=12, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=11, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=1, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=2, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=22, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="black")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red") + theme_bw()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red") + theme_fivethirtyeight()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red") + theme_bw()
original_df <- read.csv("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm/RA_dataset.csv")
df_race <- original_df["race"]
View(df_race)
df_major <- original_df["major"]
View(pca_df)
pca_df_cat <- merge(pca_df, df_race)
View(pca_df_cat)
pca_df_cat <- merge(pca_df, df_race, by=0)
View(pca_df_cat)
pca_df_cat <- merge(pca_df, df_race, by="row.names")
View(pca_df_cat)
pca_df_cat <- pca_df.join(df_race)
library(dplyr)
pca_df_cat <- pca_df.join(df_race)
library(dplyr)
pca_df_cat <- pca_df.join(df_race)
convert <- r_to_py(pca_df)
View(convert)
source_python("/src/hiring_algorithm.py")
source_python("hiring_algorithm.py")
source_python("hiring_algorithm.py")
View(df_race)
pca_df_cat <- merge(pca_df, df_race)
pca_df_cat <- merge(pca_df, df_race, by=0)
View(pca_df_cat)
View(pca_df)
View(df_race)
#plot again and color by race
ggplot(pca_df, aes(x=PC1, y=PC2, col="race")) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col="race")) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col="race")) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=pca_df_cat$race)) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point(shape=25) + theme_bw()
pca_df_cat <- merge(pca_df_cat, df_major, by=0)
pca_df_cat <- merge(pca_df, df_race, by=0)
df_race <- original_df["race", "major"]
df_cat <- original_df["race", "major"]
df_cat <- original_df %>%
select("race", "major")
View(df_cat)
pca_df_cat <- merge(pca_df, df_cat, by=0)
View(pca_df_cat)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point(shape=1) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point() + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw()
+ geom_point() + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(breaks = c("8", "6", "4"), values=c("red", "blue", "green"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "yellow"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "purple"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point() + theme_bw()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC2, y=PC3)) + geom_point(color="red") + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=major)) + geom_point() + theme_bw()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(color="red") + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
# Load the ggplot2 package
library(ggplot2)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(color="red") + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point() + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC3, y=PC4, col=major)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with major indicator")
library(reticulate)
use_python("C:/ProgramData/Anaconda3")
original_df <- read.csv("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm/RA_dataset.csv")
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
#biplot (NOT ideal)
biplot(RA_pca)
# Variance explained by each principal component: pve
pr.var <- RA_pca$sdev^2
pve <- pr.var / sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
summary(RA_pca)
pca_df <- as.data.frame(RA_pca$x)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC3, y=PC4, col=major)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC3, y=PC4, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC4, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC4, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC4, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC10, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC3, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC3 with major indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC3, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC3 with major indicator")
RA_pca$rotation
RA_pca$scale
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
View(original_df)
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
# Variance explained by each principal component: pve
pr.var <- RA_pca$sdev^2
pve <- pr.var / sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Load the ggplot2 package
library(ggplot2)
pca_df <- as.data.frame(RA_pca$x)
# Make a scatter plot
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(color="red") + theme_bw()
library(dplyr)
df_cat <- original_df %>%
select("race", "major")
pca_df_cat <- merge(pca_df, df_cat, by=0)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
df_cat <- original_df %>%
select("race", "major", "gender")
pca_df_cat <- merge(pca_df, df_cat, by=0)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC3, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC3 with major indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
class(df_cat$gender)
as.charactor(df_cat$gender)
as.character(df_cat$gender)
df_cat$gender <- as.character(df_cat$gender)
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
class(df_cat$gender)
pca_df_cat <- merge(pca_df, df_cat, by=0)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
df_cat[df_cat$gender=="1"] <- "female"
df_cat$gender[df_cat$gender=="1"] <- "female"
df_cat$gender[df_cat$gender=="2"] <- "Male"
df_cat$gender[df_cat$gender=="3"] <- "Non-binary"
pca_df_cat <- merge(pca_df, df_cat, by=0)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
df_cat$gender[df_cat$gender=="1"] <- "Female"
df_cat <- original_df %>%
select("race", "major", "gender")
df_cat$gender <- as.character(df_cat$gender)
class(df_cat$gender)
df_cat$gender[df_cat$gender=="1"] <- "Female"
df_cat$gender[df_cat$gender=="2"] <- "Male"
df_cat$gender[df_cat$gender=="3"] <- "Non-binary"
pca_df_cat <- merge(pca_df, df_cat, by=0)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
```{r}
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("Black", "Red", "Purple")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("Black", "Purple", "Red")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC2, y=PC4, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("Black", "Purple", "Red")) + ggtitle("PCA: PC2 vs PC3 with gender indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC1, y=PC4, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("Black", "Purple", "Red")) + ggtitle("PCA: PC2 vs PC3 with gender indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("Black", "Purple", "Red")) + ggtitle("PCA: PC2 vs PC3 with gender indicator")
original_df <- read.csv("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm/RA_dataset2.csv")
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
# Variance explained by each principal component: pve
pr.var <- RA_pca$sdev^2
pve <- pr.var / sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Load the ggplot2 package
library(ggplot2)
pca_df <- as.data.frame(RA_pca$x)
# Make a scatter plot
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(color="red") + theme_bw()
library(dplyr)
df_cat <- original_df %>%
select("race", "major", "gender")
df_cat$gender <- as.character(df_cat$gender)
class(df_cat$gender)
df_cat$gender[df_cat$gender=="1"] <- "Female"
df_cat$gender[df_cat$gender=="2"] <- "Male"
df_cat$gender[df_cat$gender=="3"] <- "Non-binary"
pca_df_cat <- merge(pca_df, df_cat, by=0)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey")) + ggtitle("PCA: PC1 vs PC2 with race indicator")
#plot again and color by gender
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=gender)) + geom_point() + theme_bw() + scale_color_manual(values=c("Black", "Purple", "Red")) + ggtitle("PCA: PC2 vs PC3 with gender indicator")
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC3, col=major)) + geom_point() + theme_bw() + ggtitle("PCA: PC1 vs PC3 with major indicator")
