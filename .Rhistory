getwd()
setwd("C:\Users\james\Desktop\POLI170 Policy memo")
setwd("C:/Users/james/Desktop/POLI170 Policy memo")
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv")
head(df)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv")
head(df)
pca <- prcomp(df)
View(df)
df <- df[-c(0)]
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv")
View(df)
df <- df[-c(2,50)]
View(df)
df <- df[-c(2,50)]
df <- df[c(2,50)]
View(df)
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv")
df$Ã¯..ID <- NULL
View(df)
View(df)
pca <- prcomp(df)
pca <- prcomp(t(df))
View(df)
#linear regression
lm(df)
#linear regression
RA_linreg <- lm(df)
summary(RA_linreg)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv")
View(df)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
View(df)
df$ID <- NULL
#convert catergorical values into factors
df$race <- factor(df$race)
View(df)
#convert catergorical values into factors
df$racef <- factor(df$race)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
df$ID <- NULL
is.factor(df$race)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv")
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
df$ID <- NULL
# linear regression
RA_linreg <- lm(df)
head(df)
View(df)
?prcomp
#first, import UK food data
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
x <- read.csv(url)
dim(x)
View(x)
#the row names need to be changing
rownames(x) <- x[,1]
View(x)
x <- read.csv(url)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
View(df)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
View(x)
t(x)
pca <- prcomp(df)
df$race <- factor(df$race)
View(df)
df$race <- factor(unique(df$race))
View(df)
df$race <- NULL
df$major <- NULL
pca <- prcomp(df)
summary(pca)
summary(pca)
pca <- prcomp(t(x))
#the row names need to be changing
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
#check the dimension again
dim(x)
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
pairs(x, col=rainbow(nrow(x)), pch=16)
pca <- prcomp(t(x))
summary(pca)
RA_pca <- prcomp(df)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
pca <- prcomp(t(x))
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
barplot(v, xlab="Principal Component", ylab="Percent Variation")
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df)
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
head(df)
questions <- c(df[,1])
questions <- c(df[1,])
View(questions)
questions <- colnames(df[1,])
questions <- colnames(df)
questions <- colnames(df)[9:58]
i <- 0
?mean
df$score <- mean(df[,-8])
df$score <- rowmmeans(df[,-8])
?rowMeans
df$score <- rowmMeans(df[,-8])
data.frame(scoreMean =rowmMeans(df[,-8]))
df$score <- rowMeans(df[,-8])
data.frame(scoreMean =rowMeans(df[,-8]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,-8]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,-1]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,-9]))
data.frame(ID = df$ID, scoreMean =rowMeans(df[,9:58]))
df$scoreMean <- scoreMean =rowMeans(df[,9:58])
df$scoreMean <- rowMeans(df[,9:58])
View(df)
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
head(df)
df$scoreMean <- rowMeans(df[,9:58])
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA ~ df$scoreMean)
?t.test
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA ~ df$scoreMean)
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA, df$scoreMean)
#hypothesis 1: higher gpa = higher score in evaluation
ttest <- t.test(df$GPA, df$scoreMean)
summary(ttest)
t.test(df$GPA, df$scoreMean)
summary(ttest)
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA, df$scoreMean)
getwd()
setwd("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm")
df <- read.csv("RA_dataset.csv", fileEncoding="UTF-8-BOM")
rownames(df) <- df[,1]
head(df)
df$scoreMean <- rowMeans(df[,9:58])
#hypothesis 1: higher gpa = higher score in evaluation
t.test(df$GPA, df$scoreMean)
#make subset without categorical values
drops <- c("race", "major")
df_numeric <- df[, !names(df) %in% drops]
df_numeric.head
df_numeric.head()
head(df_numeric)
# PCA without normalization (what NOT to do)
RA_pca <- prcomp(df_numeric)
source('C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm/RA_hiring_algorithm.R', echo=TRUE)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
# PCA without normalization (what NOT to do)
RA_pca <- prcomp(df_numeric)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
install.packages("reticulate")
library(reticulate)
use_python("/usr/bin/python")
n
library(reticulate)
use_python("C:/Users/james/AppData/Local/Programs/Python")
library(reticulate)
use_python("C:/Users/james/.conda/envs/r-reticulate")
library(reticulate)
library(reticulate)
use_python("C:/ProgramData/Anaconda3")
library(reticulate)
use_python("C:/ProgramData/Anaconda3")
reticulate::repl_python()
major_count
quit
normalized_data <- py$normalized_data
#hypothesis 1: high
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
summary(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(x))
text(RA_pca$x[,1], RA_pca$x[,2], colnames(RA_pca$x))
---
title: "mini-project"
author: "James Lee"
date: "11/12/2020"
output: pdf_document
---
# 1. Exploratory data analysis
## Preparing the data
```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"
# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
head(wisc.df)
```
```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
```
```{r}
# Create diagnosis vector for later
diagnosis <- wisc.df$diagnosis
```
## Exploratory data analysis
### Q1. How many observations are in this dataset?
```{r}
nrow(wisc.df)
```
569 observation
### Q2. How many of the observations have a malignant diagnosis?
```{r}
nrow(wisc.df[which(wisc.df$diagnosis == "M"),])
```
### Q3. How many variables/features in the data are suffixed with _mean?
```{r}
head(wisc.df)
```
10 variables are suffixed with _mean
# 2. Principal Component Analysis
## Performing PCA
```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
```
```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = TRUE)
summary(wisc.pr)
```
###  Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
44.27%
### Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
the first 3 PCs
### Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
the first 7 PCs
## Interpreting PCA results
```{r}
biplot(wisc.pr)
```
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = TRUE)
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"
# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
head(wisc.df)
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
# Create diagnosis vector for later
diagnosis <- wisc.df$diagnosis
nrow(wisc.df)
nrow(wisc.df[which(wisc.df$diagnosis == "M"),])
head(wisc.df)
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = TRUE)
summary(wisc.pr)
biplot(wisc.pr)
biplot(RA_pca)
normalized_data <- py$normalized_data
head(normalized_data)
# PCA after normalization
RA_pca <- prcomp(normalized_data)
summary(RA_pca)
#biplot (NOT ideal)
biplot(RA_pca)
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
summary(RA_pca)
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis
# Load the ggplot2 package
library(ggplot2)
# Make a scatter plot colored by diagnosis
ggplot(df) +
aes(PC1, PC2, col=diagnosis) +
geom_point()
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Variance explained by each principal component: pve
pve <- RA_pca / sum(RA_pca)
# Variance explained by each principal component: pve
pr.var <- RA_pca$sdev^2
pve <- pr.var / sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Plot PC1 vs PC2
plot(RA_pca$x[,2], RA_pca$x[,3], xlab="PC1", ylab="PC2", xlim=c(-270,500))
# Plot PC1 vs PC2
plot(RA_pca$x[,3], RA_pca$x[,4], xlab="PC1", ylab="PC2", xlim=c(-270,500))
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
# Plot PC1 vs PC2
plot(RA_pca$x[,1], RA_pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-10,10))
pca_df <- RA_pca$x
# Load the ggplot2 package
library(ggplot2)
pca_df <- RA_pca$x
# Make a scatter plot colored by diagnosis
ggplot(pca_df) +
aes(PC1, PC2) +
geom_point()
head(pca_df)
View(pca_df)
# Make a scatter plot colored by diagnosis
ggplot(pca_df) +
aes(PC1, PC2) +
geom_point()
# Load the ggplot2 package
library(ggplot2)
# Make a scatter plot colored by diagnosis
ggplot(pca_df) + aes(PC1, PC2) +  geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df + aes(PC1, PC2) )   +geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df) + aes(x = PC1, y=PC2) +  geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df + aes(x=PC1, y=PC2))  +  geom_point()
# Load the ggplot2 package
library(ggplot2)
pca_df <- RA_pca$x
head(pca_df)
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2))
# Load the ggplot2 package
library(ggplot2)
pca_df <- RA_pca$x
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2))
pca_df <- RA_pca$x
pca_df <- as.data.frame(RA_pca$x)
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2))
+ geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC2, y=PC3)) + geom_point()
# Load the ggplot2 package
library(ggplot2)
pca_df <- as.data.frame(RA_pca$x)
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=3, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=4, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=12, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=11, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=1, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=2, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=22, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="black")
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red") + theme_bw()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red") + theme_fivethirtyeight()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(shape=25, color="red") + theme_bw()
original_df <- read.csv("C:/Users/james/Desktop/POLI170 Policy memo/RA_hiring_algorithm/RA_dataset.csv")
df_race <- original_df["race"]
View(df_race)
df_major <- original_df["major"]
View(pca_df)
pca_df_cat <- merge(pca_df, df_race)
View(pca_df_cat)
pca_df_cat <- merge(pca_df, df_race, by=0)
View(pca_df_cat)
pca_df_cat <- merge(pca_df, df_race, by="row.names")
View(pca_df_cat)
pca_df_cat <- pca_df.join(df_race)
library(dplyr)
pca_df_cat <- pca_df.join(df_race)
library(dplyr)
pca_df_cat <- pca_df.join(df_race)
convert <- r_to_py(pca_df)
View(convert)
source_python("/src/hiring_algorithm.py")
source_python("hiring_algorithm.py")
source_python("hiring_algorithm.py")
View(df_race)
pca_df_cat <- merge(pca_df, df_race)
pca_df_cat <- merge(pca_df, df_race, by=0)
View(pca_df_cat)
View(pca_df)
View(df_race)
#plot again and color by race
ggplot(pca_df, aes(x=PC1, y=PC2, col="race")) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col="race")) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col="race")) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=pca_df_cat$race)) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point(shape=25) + theme_bw()
pca_df_cat <- merge(pca_df_cat, df_major, by=0)
pca_df_cat <- merge(pca_df, df_race, by=0)
df_race <- original_df["race", "major"]
df_cat <- original_df["race", "major"]
df_cat <- original_df %>%
select("race", "major")
View(df_cat)
pca_df_cat <- merge(pca_df, df_cat, by=0)
View(pca_df_cat)
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point(shape=25) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point(shape=1) + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point() + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw()
+ geom_point() + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(breaks = c("8", "6", "4"), values=c("red", "blue", "green"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "yellow"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "purple"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC1, y=PC2, col=major)) + geom_point() + theme_bw()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC2, y=PC3)) + geom_point(color="red") + theme_bw()
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=race)) + geom_point() + theme_bw() + scale_color_manual(values=c("red", "blue", "green", "black", "grey"))
#plot again and color by race
ggplot(pca_df_cat, aes(x=PC2, y=PC3, col=major)) + geom_point() + theme_bw()
# Make a scatter plot colored by diagnosis
ggplot(pca_df, aes(x=PC1, y=PC2)) + geom_point(color="red") + theme_bw()
